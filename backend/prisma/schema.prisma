generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")   // pooled
  directUrl  = env("DIRECT_URL")     // unpooled
  extensions = [citext()]            // para @db.Citext
}

/**
 * =========================
 * ENUMS
 * =========================
 */
enum StatusPagamento {
  PENDENTE
  PAGO
  CANCELADO
}

enum TipoMovimento {
  ENTRADA
  SAIDA
  AJUSTE
  TRANSFERENCIA
  VENDA
}

enum TipoUsuario {
  adm
  filiado
  vendedor
}

/**
 * =========================
 * CLIENTES & VENDAS
 * =========================
 */
model Cliente {
  id         String    @id @default(uuid())
  nome       String
  cpf        String    @unique
  nascimento DateTime?
  whatsapp   String?
  cidade     String?
  estado     String?
  endereco   String?
  cep        String?
  criadoEm   DateTime  @default(now())

  vendas     Venda[]

  @@index([nome])
}

model Venda {
  id                 String   @id @default(uuid())
  data               DateTime
  clienteId          String?
  clienteNome        String?
  carrinho           Json
  subtotal           Decimal   @db.Decimal(12, 2)
  totalFinal         Decimal   @db.Decimal(12, 2)
  descontoPercentual Decimal?  @db.Decimal(5, 2)
  descontoValor      Decimal?  @db.Decimal(12, 2)
  destinoDesconto    String?
  frete              Decimal?  @db.Decimal(12, 2)
  acrescimo          Decimal?  @db.Decimal(12, 2)
  formaPagamento     String?
  parcelas           Int?
  status_pagamento   StatusPagamento
  observacoes        String?

  // Relações
  cliente    Cliente? @relation(fields: [clienteId], references: [id])

  filialId   String?
  filial     Filial?  @relation(fields: [filialId], references: [id])

  vendedorId String?
  vendedor   Usuario? @relation(fields: [vendedorId], references: [id])

  // Movimentações de estoque ligadas à venda
  movimentos MovimentoEstoque[] @relation("VendaMovimentos")

  @@index([clienteId])
  @@index([filialId])
  @@index([vendedorId])

  @@map("Venda")
}

/**
 * =========================
 * ESTOQUE / CATEGORIAS
 * =========================
 */
model CategoriaEstoque {
  id    String @id @default(uuid())
  marca String
  tipo  String

  // unicidade por filial
  filialId String
  filial   Filial @relation("FilialCategorias", fields: [filialId], references: [id])

  // back-relation para ProdutoEstoque
  produtos ProdutoEstoque[] @relation("CategoriaProdutos")

  @@unique([marca, tipo, filialId], name: "marca_tipo_filial")
  @@index([filialId])
}

model Estoque {
  id          String  @id @default(uuid())
  nome        String
  cidade      String
  estado      String?
  observacoes String?

  // Estoque atrelado a uma filial (opcional)
  filialId String?
  filial   Filial? @relation(fields: [filialId], references: [id])

  produtos  ProdutoEstoque[]
  criado_em DateTime         @default(now())

  @@index([filialId])
}

model ProdutoEstoque {
  id                    String   @id @default(uuid())
  codigo                String
  nome                  String
  tipo                  String
  marca                 String
  preco_compra          Float
  preco_venda_unidade   Float
  preco_venda_caixa     Float
  quantidade_em_estoque Int
  unidades_por_caixa    Int
  caixas                Int
  criado_em             DateTime @default(now())

  // Categoria
  categoriaId String
  categoria   CategoriaEstoque @relation("CategoriaProdutos", fields: [categoriaId], references: [id])

  // Multi-estoques: pertence a um estoque
  estoqueId String
  estoque   Estoque @relation(fields: [estoqueId], references: [id])

  // Compatibilidade/relatórios: filial opcional
  filialId String?
  filial   Filial? @relation(fields: [filialId], references: [id])

  movimentos            MovimentoEstoque[]
  transferenciasOrigem  TransferenciaEstoque[] @relation("ProdutoOrigem")
  transferenciasDestino TransferenciaEstoque[] @relation("ProdutoDestino")

  // Código único dentro do estoque
  @@unique([estoqueId, codigo], name: "codigo_por_estoque_unico")
  @@index([estoqueId])
  @@index([categoriaId])
  @@index([filialId])
}

/**
 * =========================
 * USUÁRIOS / EQUIPE
 * =========================
 */
model Usuario {
  id           String       @id @default(uuid())
  cpf          String       @unique
  nome         String
  email        String       @unique @db.Citext
  tipo         TipoUsuario
  cidade       String?
  senha    String       @map("senha") // a coluna no banco chama "senha"
  nascimento   DateTime? 
  whatsapp     String?
  avatar       String?
  criadoEm     DateTime     @default(now())
  atualizadoEm DateTime     @updatedAt

  filialId String?
  filial   Filial?      @relation(fields: [filialId], references: [id])

  vendas   Venda[]
}

/**
 * =========================
 * MEMBROS (auxiliar)
 * =========================
 */
model Membro {
  id       String  @id @default(uuid())
  nome     String
  avatar   String?
  usos     Int     @default(0)
  comissao Float   @default(0)
  salvo    Boolean @default(true)
  cargo    String?
}

/**
 * =========================
 * FILIAIS (UF/ESTADOS)
 * =========================
 */
model Filial {
  id     String  @id @default(uuid())
  nome   String
  uf     String
  slug   String  @unique
  ativa  Boolean @default(true)
  corHex String?
  icone  String?

  criadoEm DateTime @default(now())

  // back-relations
  categorias CategoriaEstoque[] @relation("FilialCategorias")
  estoque    ProdutoEstoque[]        // produtos associados via ProdutoEstoque.filialId
  vendas     Venda[]
  usuarios   Usuario[]
  movimentos MovimentoEstoque[]

  transferenciasOrigem  TransferenciaEstoque[] @relation("TransferenciasOrigem")
  transferenciasDestino TransferenciaEstoque[] @relation("TransferenciasDestino")

  // estoques físicos cadastrados (multi-estoque)
  estoques Estoque[]

  @@index([nome])
  @@index([uf])
}

/**
 * =========================================
 * MOVIMENTAÇÃO & TRANSFERÊNCIA DE ESTOQUE
 * =========================================
 */
model MovimentoEstoque {
  id         String        @id @default(uuid())
  data       DateTime      @default(now())
  tipo       TipoMovimento
  quantidade Int
  saldoApos  Int?

  produtoId String
  produto   ProdutoEstoque @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  filialId String
  filial   Filial @relation(fields: [filialId], references: [id], onDelete: Cascade)

  // vínculos opcionais para auditoria
  vendaId String?
  venda   Venda?  @relation("VendaMovimentos", fields: [vendaId], references: [id], onDelete: SetNull)

  transferenciaId String?
  transferencia   TransferenciaEstoque? @relation("TransfMovimentos", fields: [transferenciaId], references: [id], onDelete: SetNull)

  @@index([filialId, data])
  @@index([produtoId, data])
}

model TransferenciaEstoque {
  id            String   @id @default(uuid())
  data          DateTime @default(now())
  produtoNome   String
  produtoCodigo String?
  quantidade    Int
  observacao    String?

  origemFilialId  String
  origemFilial    Filial @relation("TransferenciasOrigem", fields: [origemFilialId], references: [id], onDelete: Cascade)

  destinoFilialId String
  destinoFilial   Filial @relation("TransferenciasDestino", fields: [destinoFilialId], references: [id], onDelete: Cascade)

  produtoOrigemId String?
  produtoOrigem   ProdutoEstoque? @relation("ProdutoOrigem", fields: [produtoOrigemId], references: [id], onDelete: Cascade)

  produtoDestinoId String?
  produtoDestino   ProdutoEstoque? @relation("ProdutoDestino", fields: [produtoDestinoId], references: [id], onDelete: Cascade)

  // back-relation para movimentos vinculados à transferência
  movimentos MovimentoEstoque[] @relation("TransfMovimentos")

  @@index([origemFilialId, data])
  @@index([destinoFilialId, data])
}
